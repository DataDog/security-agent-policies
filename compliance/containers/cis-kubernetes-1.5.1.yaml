schema:
  version: 1.0.0
name: CIS Kubernetes
framework: cis-kubernetes
version: 1.5.1
rules:
  - id: cis-kubernetes-1.5.1-1.1.1
    description: '[CIS Kubernetes] Ensure that the API server pod specification file permissions are set to 644 or more restrictive'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") == "master"
    resourceType: kubernetes_master_node
    resources:
      - file:
          path: /etc/kubernetes/manifests/kube-apiserver.yaml
        condition: (file.permissions & 0644) == file.permissions
    info:
      index:
        - 1. Control Plane Components
        - 1.1. Master Node Configuration Files
      synopsis: Ensure that the API server pod specification file permissions are set to 644 or more restrictive (Scored)
      description: Ensure that the API server pod specification file has permissions of 644 or more restrictive.
      rationale: The API server pod specification file controls various parameters that set the behavior of the API server. You should restrict its file permissions to maintain the integrity of the file. The file should be writable by only the administrators on the system.
  - id: cis-kubernetes-1.5.1-1.1.2
    description: '[CIS Kubernetes] Ensure that the API server pod specification file ownership is set to root:root'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") == "master"
    resourceType: kubernetes_master_node
    resources:
      - file:
          path: /etc/kubernetes/manifests/kube-apiserver.yaml
        condition: file.user == "root" && file.group == "root"
    info:
      index:
        - 1. Control Plane Components
        - 1.1. Master Node Configuration Files
      synopsis: Ensure that the API server pod specification file ownership is set to root:root (Scored)
      description: Ensure that the API server pod specification file ownership is set to root:root.
      rationale: The API server pod specification file controls various parameters that set the behavior of the API server. You should set its file ownership to maintain the integrity of the file. The file should be owned by root:root.
  - id: cis-kubernetes-1.5.1-1.1.3
    description: '[CIS Kubernetes] Ensure that the controller manager pod specification file permissions are set to 644 or more restrictive'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") == "master"
    resourceType: kubernetes_master_node
    resources:
      - file:
          path: /etc/kubernetes/manifests/kube-controller-manager.yaml
        condition: (file.permissions & 0644) == file.permissions
    info:
      index:
        - 1. Control Plane Components
        - 1.1. Master Node Configuration Files
      synopsis: Ensure that the controller manager pod specification file permissions are set to 644 or more restrictive (Scored)
      description: Ensure that the controller manager pod specification file has permissions of 644 or more restrictive.
      rationale: The controller manager pod specification file controls various parameters that set the behavior of the Controller Manager on the master node. You should restrict its file permissions to maintain the integrity of the file. The file should be writable by only the administrators on the system.
  - id: cis-kubernetes-1.5.1-1.1.4
    description: '[CIS Kubernetes] Ensure that the controller manager pod specification file ownership is set to root:root'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") == "master"
    resourceType: kubernetes_master_node
    resources:
      - file:
          path: /etc/kubernetes/manifests/kube-controller-manager.yaml
        condition: file.user == "root" && file.group == "root"
    info:
      index:
        - 1. Control Plane Components
        - 1.1. Master Node Configuration Files
      synopsis: Ensure that the controller manager pod specification file ownership is set to root:root (Scored)
      description: Ensure that the controller manager pod specification file ownership is set to root:root.
      rationale: The controller manager pod specification file controls various parameters that set the behavior of various components of the master node. You should set its file ownership to maintain the integrity of the file. The file should be owned by root:root.
  - id: cis-kubernetes-1.5.1-1.1.5
    description: '[CIS Kubernetes] Ensure that the scheduler pod specification file permissions are set to 644 or more restrictive'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") == "master"
    resourceType: kubernetes_master_node
    resources:
      - file:
          path: /etc/kubernetes/manifests/kube-scheduler.yaml
        condition: (file.permissions & 0644) == file.permissions
    info:
      index:
        - 1. Control Plane Components
        - 1.1. Master Node Configuration Files
      synopsis: Ensure that the scheduler pod specification file permissions are set to 644 or more restrictive (Scored)
      description: Ensure that the scheduler pod specification file has permissions of 644 or more restrictive.
      rationale: The scheduler pod specification file controls various parameters that set the behavior of the Scheduler service in the master node. You should restrict its file permissions to maintain the integrity of the file. The file should be writable by only the administrators on the system.
  - id: cis-kubernetes-1.5.1-1.1.6
    description: '[CIS Kubernetes] Ensure that the scheduler pod specification file ownership is set to root:root'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") == "master"
    resourceType: kubernetes_master_node
    resources:
      - file:
          path: /etc/kubernetes/manifests/kube-scheduler.yaml
        condition: file.user == "root" && file.group == "root"
    info:
      index:
        - 1. Control Plane Components
        - 1.1. Master Node Configuration Files
      synopsis: Ensure that the scheduler pod specification file ownership is set to root:root (Scored)
      description: Ensure that the scheduler pod specification file ownership is set to root:root.
      rationale: The scheduler pod specification file controls various parameters that set the behavior of the kube-scheduler service in the master node. You should set its file ownership to maintain the integrity of the file. The file should be owned by root:root.
  - id: cis-kubernetes-1.5.1-1.1.7
    description: '[CIS Kubernetes] Ensure that the etcd pod specification file permissions are set to 644 or more restrictive'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") == "etcd"
    resourceType: kubernetes_master_node
    resources:
      - file:
          path: /etc/kubernetes/manifests/etcd.yaml
        condition: (file.permissions & 0644) == file.permissions
    info:
      index:
        - 1. Control Plane Components
        - 1.1. Master Node Configuration Files
      synopsis: Ensure that the etcd pod specification file permissions are set to 644 or more restrictive (Scored)
      description: Ensure that the /etc/kubernetes/manifests/etcd.yaml file has permissions of 644 or more restrictive.
      rationale: The etcd pod specification file /etc/kubernetes/manifests/etcd.yaml controls various parameters that set the behavior of the etcd service in the master node. etcd is a highly-available key-value store which Kubernetes uses for persistent storage of all of its REST API object. You should restrict its file permissions to maintain the integrity of the file. The file should be writable by only the administrators on the system.
  - id: cis-kubernetes-1.5.1-1.1.8
    description: '[CIS Kubernetes] Ensure that the etcd pod specification file ownership is set to root:root'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") == "etcd"
    resourceType: kubernetes_master_node
    resources:
      - file:
          path: /etc/kubernetes/manifests/etcd.yaml
        condition: file.user == "root" && file.group == "root"
    info:
      index:
        - 1. Control Plane Components
        - 1.1. Master Node Configuration Files
      synopsis: Ensure that the etcd pod specification file ownership is set to root:root (Scored)
      description: Ensure that the /etc/kubernetes/manifests/etcd.yaml file ownership is set to root:root.
      rationale: The etcd pod specification file /etc/kubernetes/manifests/etcd.yaml controls various parameters that set the behavior of the etcd service in the master node. etcd is a highly-available key-value store which Kubernetes uses for persistent storage of all of its REST API object. You should set its file ownership to maintain the integrity of the file. The file should be owned by root:root.
  - id: cis-kubernetes-1.5.1-1.1.11
    description: '[CIS Kubernetes] Ensure that the etcd data directory permissions are set to 700 or more restrictive'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") == "etcd"
    resourceType: kubernetes_master_node
    resources:
      - file:
          path: process.flag("etcd", "--data-dir")
        condition: (file.permissions & 0700) == file.permissions
    info:
      index:
        - 1. Control Plane Components
        - 1.1. Master Node Configuration Files
      synopsis: Ensure that the etcd data directory permissions are set to 700 or more restrictive (Scored)
      description: Ensure that the etcd data directory has permissions of 700 or more restrictive.
      rationale: etcd is a highly-available key-value store used by Kubernetes deployments for persistent storage of all of its REST API objects. This data directory should be protected from any unauthorized reads or writes. It should not be readable or writable by any group members or the world.
  - id: cis-kubernetes-1.5.1-1.1.12
    description: '[CIS Kubernetes] Ensure that the etcd data directory ownership is set to etcd:etcd'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") == "etcd"
    resourceType: kubernetes_master_node
    resources:
      - file:
          path: process.flag("etcd", "--data-dir")
        condition: file.user == "etcd" && file.group == "etcd"
    info:
      index:
        - 1. Control Plane Components
        - 1.1. Master Node Configuration Files
      synopsis: Ensure that the etcd data directory ownership is set to etcd:etcd (Scored)
      description: Ensure that the etcd data directory ownership is set to etcd:etcd.
      rationale: etcd is a highly-available key-value store used by Kubernetes deployments for persistent storage of all of its REST API objects. This data directory should be protected from any unauthorized reads or writes. It should be owned by etcd:etcd.
  - id: cis-kubernetes-1.5.1-1.1.13
    description: '[CIS Kubernetes] Ensure that the admin.conf file permissions are set to 644 or more restrictive'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") == "master"
    resourceType: kubernetes_master_node
    resources:
      - file:
          path: /etc/kubernetes/admin.conf
        condition: (file.permissions & 0644) == file.permissions
    info:
      index:
        - 1. Control Plane Components
        - 1.1. Master Node Configuration Files
      synopsis: Ensure that the admin.conf file permissions are set to 644 or more restrictive (Scored)
      description: Ensure that the admin.conf file has permissions of 644 or more restrictive.
      rationale: The admin.conf is the administrator kubeconfig file defining various settings for the administration of the cluster. You should restrict its file permissions to maintain the integrity of the file. The file should be writable by only the administrators on the system.
  - id: cis-kubernetes-1.5.1-1.1.14
    description: '[CIS Kubernetes] Ensure that the admin.conf file ownership is set to root:root'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") == "master"
    resourceType: kubernetes_master_node
    resources:
      - file:
          path: /etc/kubernetes/admin.conf
        condition: file.user == "root" && file.group == "root"
    info:
      index:
        - 1. Control Plane Components
        - 1.1. Master Node Configuration Files
      synopsis: Ensure that the admin.conf file ownership is set to root:root (Scored)
      description: Ensure that the admin.conf file ownership is set to root:root.
      rationale: The admin.conf file contains the admin credentials for the cluster. You should set its file ownership to maintain the integrity of the file. The file should be owned by root:root.
  - id: cis-kubernetes-1.5.1-1.1.15
    description: '[CIS Kubernetes] Ensure that the scheduler.conf file permissions are set to 644 or more restrictive'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") == "master"
    resourceType: kubernetes_master_node
    resources:
      - file:
          path: /etc/kubernetes/scheduler.conf
        condition: (file.permissions & 0644) == file.permissions
    info:
      index:
        - 1. Control Plane Components
        - 1.1. Master Node Configuration Files
      synopsis: Ensure that the scheduler.conf file permissions are set to 644 or more restrictive (Scored)
      description: Ensure that the scheduler.conf file has permissions of 644 or more restrictive.
      rationale: The scheduler.conf file is the kubeconfig file for the Scheduler. You should restrict its file permissions to maintain the integrity of the file. The file should be writable by only the administrators on the system.
  - id: cis-kubernetes-1.5.1-1.1.16
    description: '[CIS Kubernetes] Ensure that the scheduler.conf file ownership is set to root:root'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") == "master"
    resourceType: kubernetes_master_node
    resources:
      - file:
          path: /etc/kubernetes/scheduler.conf
        condition: file.user == "root" && file.group == "root"
    info:
      index:
        - 1. Control Plane Components
        - 1.1. Master Node Configuration Files
      synopsis: Ensure that the scheduler.conf file ownership is set to root:root (Scored)
      description: Ensure that the scheduler.conf file ownership is set to root:root.
      rationale: The scheduler.conf file is the kubeconfig file for the Scheduler. You should set its file ownership to maintain the integrity of the file. The file should be owned by root:root.
  - id: cis-kubernetes-1.5.1-1.1.17
    description: '[CIS Kubernetes] Ensure that the controller-manager.conf file permissions are set to 644 or more restrictive'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") == "master"
    resourceType: kubernetes_master_node
    resources:
      - file:
          path: /etc/kubernetes/controller-manager.conf
        condition: (file.permissions & 0644) == file.permissions
    info:
      index:
        - 1. Control Plane Components
        - 1.1. Master Node Configuration Files
      synopsis: Ensure that the controller-manager.conf file permissions are set to 644 or more restrictive (Scored)
      description: Ensure that the controller-manager.conf file has permissions of 644 or more restrictive.
      rationale: The controller-manager.conf file is the kubeconfig file for the Controller Manager. You should restrict its file permissions to maintain the integrity of the file. The file should be writable by only the administrators on the system.
  - id: cis-kubernetes-1.5.1-1.1.18
    description: '[CIS Kubernetes] Ensure that the controller-manager.conf file ownership is set to root:root'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") == "master"
    resourceType: kubernetes_master_node
    resources:
      - file:
          path: /etc/kubernetes/controller-manager.conf
        condition: file.user == "root" && file.group == "root"
    info:
      index:
        - 1. Control Plane Components
        - 1.1. Master Node Configuration Files
      synopsis: Ensure that the controller-manager.conf file ownership is set to root:root (Scored)
      description: Ensure that the controller-manager.conf file ownership is set to root:root.
      rationale: The controller-manager.conf file is the kubeconfig file for the Controller Manager. You should set its file ownership to maintain the integrity of the file. The file should be owned by root:root.
  - id: cis-kubernetes-1.5.1-1.1.19
    description: '[CIS Kubernetes] Ensure that the Kubernetes PKI directory and file ownership is set to root:root'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") == "master"
    resourceType: kubernetes_master_node
    resources:
      - file:
          path: /etc/kubernetes/pki/
        condition: file.user == "root" && file.group == "root"
    info:
      index:
        - 1. Control Plane Components
        - 1.1. Master Node Configuration Files
      synopsis: Ensure that the Kubernetes PKI directory and file ownership is set to root:root (Scored)
      description: Ensure that the Kubernetes PKI directory and file ownership is set to root:root.
      rationale: Kubernetes makes use of a number of certificates as part of its operation. You should set the ownership of the directory containing the PKI information and all files in that directory to maintain their integrity. The directory and files should be owned by root:root.
  - id: cis-kubernetes-1.5.1-1.1.20
    description: '[CIS Kubernetes] Ensure that the Kubernetes PKI certificate file permissions are set to 644 or more restrictive'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") == "master"
    resourceType: kubernetes_master_node
    resources:
      - file:
          path: /etc/kubernetes/pki/*.crt
        condition: (file.permissions & 0644) == file.permissions
    info:
      index:
        - 1. Control Plane Components
        - 1.1. Master Node Configuration Files
      synopsis: Ensure that the Kubernetes PKI certificate file permissions are set to 644 or more restrictive (Not Scored)
      description: Ensure that Kubernetes PKI certificate files have permissions of 644 or more restrictive.
      rationale: Kubernetes makes use of a number of certificate files as part of the operation of its components. The permissions on these files should be set to 644 or more restrictive to protect their integrity.
  - id: cis-kubernetes-1.5.1-1.2.2
    description: '[CIS Kubernetes] Ensure that the --basic-auth-file argument is not set'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") == "master"
    resourceType: kubernetes_master_node
    resources:
      - process:
          name: kube-apiserver
        condition: '!process.hasFlag("--basic-auth-file")'
    info:
      index:
        - 1. Control Plane Components
        - 1.2. API Server
      synopsis: Ensure that the --basic-auth-file argument is not set (Scored)
      description: Do not use basic authentication.
      rationale: Basic authentication uses plaintext credentials for authentication. Currently, the basic authentication credentials last indefinitely, and the password cannot be changed without restarting the API server. The basic authentication is currently supported for convenience. Hence, basic authentication should not be used.
  - id: cis-kubernetes-1.5.1-1.2.3
    description: '[CIS Kubernetes] Ensure that the --token-auth-file parameter is not set'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") == "master"
    resourceType: kubernetes_master_node
    resources:
      - process:
          name: kube-apiserver
        condition: '!process.hasFlag("--token-auth-file")'
    info:
      index:
        - 1. Control Plane Components
        - 1.2. API Server
      synopsis: Ensure that the --token-auth-file parameter is not set (Scored)
      description: Do not use token based authentication.
      rationale: The token-based authentication utilizes static tokens to authenticate requests to the apiserver. The tokens are stored in clear-text in a file on the apiserver, and cannot be revoked or rotated without restarting the apiserver. Hence, do not use static token-based authentication.
  - id: cis-kubernetes-1.5.1-1.2.4
    description: '[CIS Kubernetes] Ensure that the --kubelet-https argument is set to true'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") == "master"
    resourceType: kubernetes_master_node
    resources:
      - process:
          name: kube-apiserver
        condition: '!process.hasFlag("--kubelet-https") || process.flag("--kubelet-https") == "true"'
    info:
      index:
        - 1. Control Plane Components
        - 1.2. API Server
      synopsis: Ensure that the --kubelet-https argument is set to true (Scored)
      description: Use https for kubelet connections.
      rationale: Connections from apiserver to kubelets could potentially carry sensitive data such as secrets and keys. It is thus important to use in-transit encryption for any communication between the apiserver and kubelets.
  - id: cis-kubernetes-1.5.1-1.2.5
    description: '[CIS Kubernetes] Ensure that the --kubelet-client-certificate and --kubelet-client-key arguments are set as appropriate'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") == "master"
    resourceType: kubernetes_master_node
    resources:
      - process:
          name: kube-apiserver
        condition: process.flag("--kubelet-client-certificate") != "" && process.flag("--kubelet-client-key") != ""
    info:
      index:
        - 1. Control Plane Components
        - 1.2. API Server
      synopsis: Ensure that the --kubelet-client-certificate and --kubelet-client-key arguments are set as appropriate (Scored)
      description: Enable certificate based kubelet authentication.
      rationale: The apiserver, by default, does not authenticate itself to the kubelet's HTTPS endpoints. The requests from the apiserver are treated anonymously. You should set up certificate-based kubelet authentication to ensure that the apiserver authenticates itself to kubelets when submitting requests.
  - id: cis-kubernetes-1.5.1-1.2.6
    description: '[CIS Kubernetes] Ensure that the --kubelet-certificate-authority argument is set as appropriate'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") == "master"
    resourceType: kubernetes_master_node
    resources:
      - process:
          name: kube-apiserver
        condition: process.flag("--kubelet-certificate-authority") != ""
    info:
      index:
        - 1. Control Plane Components
        - 1.2. API Server
      synopsis: Ensure that the --kubelet-certificate-authority argument is set as appropriate (Scored)
      description: Verify kubelet's certificate before establishing connection.
      rationale: The connections from the apiserver to the kubelet are used for fetching logs for pods, attaching (through kubectl) to running pods, and using the kubelets port-forwarding functionality. These connections terminate at the kubelets HTTPS endpoint. By default, the apiserver does not verify the kubelets serving certificate, which makes the connection subject to man-in-the-middle attacks, and unsafe to run over untrusted and/or public networks.
  - id: cis-kubernetes-1.5.1-1.2.7
    description: '[CIS Kubernetes] Ensure that the --authorization-mode argument is not set to AlwaysAllow (API server)'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") == "master"
    resourceType: kubernetes_master_node
    resources:
      - process:
          name: kube-apiserver
        condition: process.flag("--authorization-mode") != "AlwaysAllow"
    info:
      index:
        - 1. Control Plane Components
        - 1.2. API Server
      synopsis: Ensure that the --authorization-mode argument is not set to AlwaysAllow (Scored)
      description: Do not always authorize all requests.
      rationale: The API Server, can be configured to allow all requests. This mode should not be used on any production cluster.
  - id: cis-kubernetes-1.5.1-1.2.8
    description: '[CIS Kubernetes] Ensure that the --authorization-mode argument includes Node'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") == "master"
    resourceType: kubernetes_master_node
    resources:
      - process:
          name: kube-apiserver
        condition: process.flag("--authorization-mode") =~ "Node"
    info:
      index:
        - 1. Control Plane Components
        - 1.2. API Server
      synopsis: Ensure that the --authorization-mode argument includes Node (Scored)
      description: Restrict kubelet nodes to reading only objects associated with them.
      rationale: The Node authorization mode only allows kubelets to read Secret, ConfigMap, PersistentVolume, and PersistentVolumeClaim objects associated with their nodes.
  - id: cis-kubernetes-1.5.1-1.2.9
    description: '[CIS Kubernetes] Ensure that the --authorization-mode argument includes RBAC'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") == "master"
    resourceType: kubernetes_master_node
    resources:
      - process:
          name: kube-apiserver
        condition: process.flag("--authorization-mode") =~ "RBAC"
    info:
      index:
        - 1. Control Plane Components
        - 1.2. API Server
      synopsis: Ensure that the --authorization-mode argument includes RBAC (Scored)
      description: Turn on Role Based Access Control.
      rationale: Role Based Access Control (RBAC) allows fine-grained control over the operations that different entities can perform on different objects in the cluster. It is recommended to use the RBAC authorization mode.
  - id: cis-kubernetes-1.5.1-1.2.11
    description: '[CIS Kubernetes] Ensure that the admission control plugin AlwaysAdmit is not set'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") == "master"
    resourceType: kubernetes_master_node
    resources:
      - process:
          name: kube-apiserver
        condition: process.flag("--enable-admission-plugins") !~ "AlwaysAdmit"
    info:
      index:
        - 1. Control Plane Components
        - 1.2. API Server
      synopsis: Ensure that the admission control plugin AlwaysAdmit is not set (Scored)
      description: Do not allow all requests.
      rationale: Setting admission control plugin AlwaysAdmit allows all requests and do not filter any requests. The AlwaysAdmit admission controller was deprecated in Kubernetes v1.13. Its behavior was equivalent to turning off all admission controllers.
  - id: cis-kubernetes-1.5.1-1.2.14
    description: '[CIS Kubernetes] Ensure that the admission control plugin ServiceAccount is set'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") == "master"
    resourceType: kubernetes_master_node
    resources:
      - process:
          name: kube-apiserver
        condition: process.flag("--disable-admission-plugins") !~ "ServiceAccount"
    info:
      index:
        - 1. Control Plane Components
        - 1.2. API Server
      synopsis: Ensure that the admission control plugin ServiceAccount is set (Scored)
      description: Automate service accounts management.
      rationale: When you create a pod, if you do not specify a service account, it is automatically assigned the default service account in the same namespace. You should create your own service account and let the API server manage its security tokens.
  - id: cis-kubernetes-1.5.1-1.2.15
    description: '[CIS Kubernetes] Ensure that the admission control plugin NamespaceLifecycle is set'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") == "master"
    resourceType: kubernetes_master_node
    resources:
      - process:
          name: kube-apiserver
        condition: process.flag("--disable-admission-plugins") !~ "NamespaceLifecycle"
    info:
      index:
        - 1. Control Plane Components
        - 1.2. API Server
      synopsis: Ensure that the admission control plugin NamespaceLifecycle is set (Scored)
      description: Reject creating objects in a namespace that is undergoing termination.
      rationale: Setting admission control policy to NamespaceLifecycle ensures that objects cannot be created in non-existent namespaces, and that namespaces undergoing termination are not used for creating the new objects. This is recommended to enforce the integrity of the namespace termination process and also for the availability of the newer objects.
  - id: cis-kubernetes-1.5.1-1.2.16
    description: '[CIS Kubernetes] Ensure that the admission control plugin PodSecurityPolicy is set'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") == "master"
    resourceType: kubernetes_master_node
    resources:
      - process:
          name: kube-apiserver
        condition: process.flag("--enable-admission-plugins") =~ "PodSecurityPolicy"
    info:
      index:
        - 1. Control Plane Components
        - 1.2. API Server
      synopsis: Ensure that the admission control plugin PodSecurityPolicy is set (Scored)
      description: Reject creating pods that do not match Pod Security Policies.
      rationale: 'A Pod Security Policy is a cluster-level resource that controls the actions that a pod can perform and what it has the ability to access. The PodSecurityPolicy objects define a set of conditions that a pod must run with in order to be accepted into the system. Pod Security Policies are comprised of settings and strategies that control the security features a pod has access to and hence this must be used to control pod access permissions. Note: When the PodSecurityPolicy admission plugin is in use, there needs to be at least one PodSecurityPolicy in place for ANY pods to be admitted. See section 1.7 for recommendations on PodSecurityPolicy settings.'
  - id: cis-kubernetes-1.5.1-1.2.17
    description: '[CIS Kubernetes] Ensure that the admission control plugin NodeRestriction is set'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") == "master"
    resourceType: kubernetes_master_node
    resources:
      - process:
          name: kube-apiserver
        condition: process.flag("--enable-admission-plugins") =~ "NodeRestriction"
    info:
      index:
        - 1. Control Plane Components
        - 1.2. API Server
      synopsis: Ensure that the admission control plugin NodeRestriction is set (Scored)
      description: Limit the Node and Pod objects that a kubelet could modify.
      rationale: Using the NodeRestriction plug-in ensures that the kubelet is restricted to the Node and Pod objects that it could modify as defined. Such kubelets will only be allowed to modify their own Node API object, and only modify Pod API objects that are bound to their node.
  - id: cis-kubernetes-1.5.1-1.2.18
    description: '[CIS Kubernetes] Ensure that the --insecure-bind-address argument is not set'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") == "master"
    resourceType: kubernetes_master_node
    resources:
      - process:
          name: kube-apiserver
        condition: '!process.hasFlag("--insecure-bind-address")'
    info:
      index:
        - 1. Control Plane Components
        - 1.2. API Server
      synopsis: Ensure that the --insecure-bind-address argument is not set (Scored)
      description: Do not bind the insecure API service.
      rationale: If you bind the apiserver to an insecure address, basically anyone who could connect to it over the insecure port, would have unauthenticated and unencrypted access to your master node. The apiserver doesn't do any authentication checking for insecure binds and traffic to the Insecure API port is not encrpyted, allowing attackers to potentially read sensitive data in transit.
  - id: cis-kubernetes-1.5.1-1.2.19
    description: '[CIS Kubernetes] Ensure that the --insecure-port argument is set to 0'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") == "master"
    resourceType: kubernetes_master_node
    resources:
      - process:
          name: kube-apiserver
        condition: process.flag("--insecure-port") == "0"
    info:
      index:
        - 1. Control Plane Components
        - 1.2. API Server
      synopsis: Ensure that the --insecure-port argument is set to 0 (Scored)
      description: Do not bind to insecure port.
      rationale: Setting up the apiserver to serve on an insecure port would allow unauthenticated and unencrypted access to your master node. This would allow attackers who could access this port, to easily take control of the cluster.
  - id: cis-kubernetes-1.5.1-1.2.20
    description: '[CIS Kubernetes] Ensure that the --secure-port argument is not set to 0'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") == "master"
    resourceType: kubernetes_master_node
    resources:
      - process:
          name: kube-apiserver
        condition: '!process.hasFlag("--secure-port") || process.flag("--secure-port") != "0"'
    info:
      index:
        - 1. Control Plane Components
        - 1.2. API Server
      synopsis: Ensure that the --secure-port argument is not set to 0 (Scored)
      description: Do not disable the secure port.
      rationale: The secure port is used to serve https with authentication and authorization. If you disable it, no https traffic is served and all traffic is served unencrypted.
  - id: cis-kubernetes-1.5.1-1.2.21
    description: '[CIS Kubernetes] Ensure that the --profiling argument is set to false (API server)'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") == "master"
    resourceType: kubernetes_master_node
    resources:
      - process:
          name: kube-apiserver
        condition: process.flag("--profiling") == "false"
    info:
      index:
        - 1. Control Plane Components
        - 1.2. API Server
      synopsis: Ensure that the --profiling argument is set to false (Scored)
      description: Disable profiling, if not needed.
      rationale: Profiling allows for the identification of specific performance bottlenecks. It generates a significant amount of program data that could potentially be exploited to uncover system and program details. If you are not experiencing any bottlenecks and do not need the profiler for troubleshooting purposes, it is recommended to turn it off to reduce the potential attack surface.
  - id: cis-kubernetes-1.5.1-1.2.22
    description: '[CIS Kubernetes] Ensure that the --audit-log-path argument is set'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") == "master"
    resourceType: kubernetes_master_node
    resources:
      - process:
          name: kube-apiserver
        condition: process.hasFlag("--audit-log-path")
    info:
      index:
        - 1. Control Plane Components
        - 1.2. API Server
      synopsis: Ensure that the --audit-log-path argument is set (Scored)
      description: Enable auditing on the Kubernetes API Server and set the desired audit log path.
      rationale: Auditing the Kubernetes API Server provides a security-relevant chronological set of records documenting the sequence of activities that have affected system by individual users, administrators or other components of the system. Even though currently, Kubernetes provides only basic audit capabilities, it should be enabled. You can enable it by setting an appropriate audit log path.
  - id: cis-kubernetes-1.5.1-1.2.23
    description: '[CIS Kubernetes] Ensure that the --audit-log-maxage argument is set to 30 or as appropriate'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") == "master"
    resourceType: kubernetes_master_node
    resources:
      - process:
          name: kube-apiserver
        condition: process.hasFlag("--audit-log-maxage")
    info:
      index:
        - 1. Control Plane Components
        - 1.2. API Server
      synopsis: Ensure that the --audit-log-maxage argument is set to 30 or as appropriate (Scored)
      description: Retain the logs for at least 30 days or as appropriate.
      rationale: Retaining logs for at least 30 days ensures that you can go back in time and investigate or correlate any events. Set your audit log retention period to 30 days or as per your business requirements.
  - id: cis-kubernetes-1.5.1-1.2.24
    description: '[CIS Kubernetes] Ensure that the --audit-log-maxbackup argument is set to 10 or as appropriate'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") == "master"
    resourceType: kubernetes_master_node
    resources:
      - process:
          name: kube-apiserver
        condition: process.hasFlag("--audit-log-maxbackup")
    info:
      index:
        - 1. Control Plane Components
        - 1.2. API Server
      synopsis: Ensure that the --audit-log-maxbackup argument is set to 10 or as appropriate (Scored)
      description: Retain 10 or an appropriate number of old log files.
      rationale: Kubernetes automatically rotates the log files. Retaining old log files ensures that you would have sufficient log data available for carrying out any investigation or correlation. For example, if you have set file size of 100 MB and the number of old log files to keep as 10, you would approximate have 1 GB of log data that you could potentially use for your analysis.
  - id: cis-kubernetes-1.5.1-1.2.25
    description: '[CIS Kubernetes] Ensure that the --audit-log-maxsize argument is set to 100 or as appropriate'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") == "master"
    resourceType: kubernetes_master_node
    resources:
      - process:
          name: kube-apiserver
        condition: process.hasFlag("--audit-log-maxsize")
    info:
      index:
        - 1. Control Plane Components
        - 1.2. API Server
      synopsis: Ensure that the --audit-log-maxsize argument is set to 100 or as appropriate (Scored)
      description: Rotate log files on reaching 100 MB or as appropriate.
      rationale: Kubernetes automatically rotates the log files. Retaining old log files ensures that you would have sufficient log data available for carrying out any investigation or correlation. If you have set file size of 100 MB and the number of old log files to keep as 10, you would approximate have 1 GB of log data that you could potentially use for your analysis.
  - id: cis-kubernetes-1.5.1-1.2.26
    description: '[CIS Kubernetes] Ensure that the --request-timeout argument is set as appropriate'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") == "master"
    resourceType: kubernetes_master_node
    resources:
      - process:
          name: kube-apiserver
        condition: process.hasFlag("--request-timeout")
    info:
      index:
        - 1. Control Plane Components
        - 1.2. API Server
      synopsis: Ensure that the --request-timeout argument is set as appropriate (Scored)
      description: Set global request timeout for API server requests as appropriate.
      rationale: Setting global request timeout allows extending the API server request timeout limit to a duration appropriate to the user's connection speed. By default, it is set to 60 seconds which might be problematic on slower connections making cluster resources inaccessible once the data volume for requests exceeds what can be transmitted in 60 seconds. But, setting this timeout limit to be too large can exhaust the API server resources making it prone to Denial-of-Service attack. Hence, it is recommended to set this limit as appropriate and change the default limit of 60 seconds only if needed.
  - id: cis-kubernetes-1.5.1-1.2.27
    description: '[CIS Kubernetes] Ensure that the --service-account-lookup argument is set to true'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") == "master"
    resourceType: kubernetes_master_node
    resources:
      - process:
          name: kube-apiserver
        condition: process.flag("--service-account-lookup") == "true"
    info:
      index:
        - 1. Control Plane Components
        - 1.2. API Server
      synopsis: Ensure that the --service-account-lookup argument is set to true (Scored)
      description: Validate service account before validating token.
      rationale: If --service-account-lookup is not enabled, the apiserver only verifies that the authentication token is valid, and does not validate that the service account token mentioned in the request is actually present in etcd. This allows using a service account token even after the corresponding service account is deleted. This is an example of time of check to time of use security issue.
  - id: cis-kubernetes-1.5.1-1.2.28
    description: '[CIS Kubernetes] Ensure that the --service-account-key-file argument is set as appropriate'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") == "master"
    resourceType: kubernetes_master_node
    resources:
      - process:
          name: kube-apiserver
        condition: process.flag("--service-account-key-file") != ""
    info:
      index:
        - 1. Control Plane Components
        - 1.2. API Server
      synopsis: Ensure that the --service-account-key-file argument is set as appropriate (Scored)
      description: Explicitly set a service account public key file for service accounts on the apiserver.
      rationale: By default, if no --service-account-key-file is specified to the apiserver, it uses the private key from the TLS serving certificate to verify service account tokens. To ensure that the keys for service account tokens could be rotated as needed, a separate public/private key pair should be used for signing service account tokens. Hence, the public key should be specified to the apiserver with --service-account-key-file.
  - id: cis-kubernetes-1.5.1-1.2.29
    description: '[CIS Kubernetes] Ensure that the --etcd-certfile and --etcd-keyfile arguments are set as appropriate'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") == "master"
    resourceType: kubernetes_master_node
    resources:
      - process:
          name: kube-apiserver
        condition: process.flag("--etcd-certfile") != "" && process.flag("--etcd-keyfile") != ""
    info:
      index:
        - 1. Control Plane Components
        - 1.2. API Server
      synopsis: Ensure that the --etcd-certfile and --etcd-keyfile arguments are set as appropriate (Scored)
      description: etcd should be configured to make use of TLS encryption for client connections.
      rationale: etcd is a highly-available key value store used by Kubernetes deployments for persistent storage of all of its REST API objects. These objects are sensitive in nature and should be protected by client authentication. This requires the API server to identify itself to the etcd server using a client certificate and key.
  - id: cis-kubernetes-1.5.1-1.2.30
    description: '[CIS Kubernetes] Ensure that the --tls-cert-file and --tls-private-key-file arguments are set as appropriate (API server)'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") == "master"
    resourceType: kubernetes_master_node
    resources:
      - process:
          name: kube-apiserver
        condition: process.flag("--tls-cert-file") != "" && process.flag("--tls-private-key-file") != ""
    info:
      index:
        - 1. Control Plane Components
        - 1.2. API Server
      synopsis: Ensure that the --tls-cert-file and --tls-private-key-file arguments are set as appropriate (Scored)
      description: Setup TLS connection on the API server.
      rationale: API server communication contains sensitive parameters that should remain encrypted in transit. Configure the API server to serve only HTTPS traffic.
  - id: cis-kubernetes-1.5.1-1.2.31
    description: '[CIS Kubernetes] Ensure that the --client-ca-file argument is set as appropriate (API server)'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") == "master"
    resourceType: kubernetes_master_node
    resources:
      - process:
          name: kube-apiserver
        condition: process.flag("--client-ca-file") != ""
    info:
      index:
        - 1. Control Plane Components
        - 1.2. API Server
      synopsis: Ensure that the --client-ca-file argument is set as appropriate (Scored)
      description: Setup TLS connection on the API server.
      rationale: API server communication contains sensitive parameters that should remain encrypted in transit. Configure the API server to serve only HTTPS traffic. If --client-ca-file argument is set, any request presenting a client certificate signed by one of the authorities in the client-ca-file is authenticated with an identity corresponding to the CommonName of the client certificate.
  - id: cis-kubernetes-1.5.1-1.2.32
    description: '[CIS Kubernetes] Ensure that the --etcd-cafile argument is set as appropriate'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") == "master"
    resourceType: kubernetes_master_node
    resources:
      - process:
          name: kube-apiserver
        condition: process.flag("--etcd-cafile") != ""
    info:
      index:
        - 1. Control Plane Components
        - 1.2. API Server
      synopsis: Ensure that the --etcd-cafile argument is set as appropriate (Scored)
      description: etcd should be configured to make use of TLS encryption for client connections.
      rationale: etcd is a highly-available key value store used by Kubernetes deployments for persistent storage of all of its REST API objects. These objects are sensitive in nature and should be protected by client authentication. This requires the API server to identify itself to the etcd server using a SSL Certificate Authority file.
  - id: cis-kubernetes-1.5.1-1.2.33
    description: '[CIS Kubernetes] Ensure that the --encryption-provider-config argument is set as appropriate'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") == "master"
    resourceType: kubernetes_master_node
    resources:
      - process:
          name: kube-apiserver
        condition: process.flag("--encryption-provider-config") != ""
    info:
      index:
        - 1. Control Plane Components
        - 1.2. API Server
      synopsis: Ensure that the --encryption-provider-config argument is set as appropriate (Not Scored)
      description: Encrypt etcd key-value store.
      rationale: etcd is a highly available key-value store used by Kubernetes deployments for persistent storage of all of its REST API objects. These objects are sensitive in nature and should be encrypted at rest to avoid any disclosures.
  - id: cis-kubernetes-1.5.1-1.3.2
    description: '[CIS Kubernetes] Ensure that the --profiling argument is set to false (Controller Manager)'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") == "master"
    resources:
      - process:
          name: kube-controller-manager
        condition: process.flag("--profiling") == "false"
    info:
      index:
        - 1. Control Plane Components
        - 1.3. Controller Manager
      synopsis: Ensure that the --profiling argument is set to false (Scored)
      description: Disable profiling, if not needed.
      rationale: Profiling allows for the identification of specific performance bottlenecks. It generates a significant amount of program data that could potentially be exploited to uncover system and program details. If you are not experiencing any bottlenecks and do not need the profiler for troubleshooting purposes, it is recommended to turn it off to reduce the potential attack surface.
  - id: cis-kubernetes-1.5.1-1.3.3
    description: '[CIS Kubernetes] Ensure that the --use-service-account-credentials argument is set to true'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") == "master"
    resources:
      - process:
          name: kube-controller-manager
        condition: process.flag("--use-service-account-credentials") == "true"
    info:
      index:
        - 1. Control Plane Components
        - 1.3. Controller Manager
      synopsis: Ensure that the --use-service-account-credentials argument is set to true (Scored)
      description: Use individual service account credentials for each controller.
      rationale: The controller manager creates a service account per controller in the kube-system namespace, generates a credential for it, and builds a dedicated API client with that service account credential for each controller loop to use. Setting the --use-service-account-credentials to true runs each control loop within the controller manager using a separate service account credential. When used in combination with RBAC, this ensures that the control loops run with the minimum permissions required to perform their intended tasks.
  - id: cis-kubernetes-1.5.1-1.3.4
    description: '[CIS Kubernetes] Ensure that the --service-account-private-key-file argument is set as appropriate'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") == "master"
    resourceType: kubernetes_master_node
    resources:
      - process:
          name: kube-controller-manager
        condition: process.flag("--service-account-private-key-file") != ""
    info:
      index:
        - 1. Control Plane Components
        - 1.3. Controller Manager
      synopsis: Ensure that the --service-account-private-key-file argument is set as appropriate (Scored)
      description: Explicitly set a service account private key file for service accounts on the controller manager.
      rationale: To ensure that keys for service account tokens can be rotated as needed, a separate public/private key pair should be used for signing service account tokens. The private key should be specified to the controller manager with --service-account-private-key-file as appropriate.
  - id: cis-kubernetes-1.5.1-1.3.5
    description: '[CIS Kubernetes] Ensure that the --root-ca-file argument is set as appropriate'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") == "master"
    resourceType: kubernetes_master_node
    resources:
      - process:
          name: kube-controller-manager
        condition: process.flag("--root-ca-file") != ""
    info:
      index:
        - 1. Control Plane Components
        - 1.3. Controller Manager
      synopsis: Ensure that the --root-ca-file argument is set as appropriate (Scored)
      description: Allow pods to verify the API server's serving certificate before establishing connections.
      rationale: Processes running within pods that need to contact the API server must verify the API server's serving certificate. Failing to do so could be a subject to man-in-the-middle attacks. Providing the root certificate for the API server's serving certificate to the controller manager with the --root-ca-file argument allows the controller manager to inject the trusted bundle into pods so that they can verify TLS connections to the API server.
  - id: cis-kubernetes-1.5.1-1.3.6
    description: '[CIS Kubernetes] Ensure that the RotateKubeletServerCertificate argument is set to true (Controller Manager)'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") == "master"
    resourceType: kubernetes_master_node
    resources:
      - process:
          name: kube-controller-manager
        condition: process.flag("--feature-gates") =~ "RotateKubeletServerCertificate=true"
    info:
      index:
        - 1. Control Plane Components
        - 1.3. Controller Manager
      synopsis: Ensure that the RotateKubeletServerCertificate argument is set to true (Scored)
      description: Enable kubelet server certificate rotation on controller-manager.
      rationale: 'RotateKubeletServerCertificate causes the kubelet to both request a serving certificate after bootstrapping its client credentials and rotate the certificate as its existing credentials expire. This automated periodic rotation ensures that the there are no downtimes due to expired certificates and thus addressing availability in the CIA security triad. Note: This recommendation only applies if you let kubelets get their certificates from the API server. In case your kubelet certificates come from an outside authority/tool (e.g. Vault) then you need to take care of rotation yourself.'
  - id: cis-kubernetes-1.5.1-1.3.7
    description: '[CIS Kubernetes] Ensure that the --bind-address argument is set to 127.0.0.1 (Controller Manager)'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") == "master"
    resourceType: kubernetes_master_node
    resources:
      - process:
          name: kube-controller-manager
        condition: process.flag("--bind-address") == "127.0.0.1"
    info:
      index:
        - 1. Control Plane Components
        - 1.3. Controller Manager
      synopsis: Ensure that the --bind-address argument is set to 127.0.0.1 (Scored)
      description: Do not bind the Controller Manager service to non-loopback insecure addresses.
      rationale: The Controller Manager API service which runs on port 10252/TCP by default is used for health and metrics information and is available without authentication or encryption. As such it should only be bound to a localhost interface, to minimize the cluster's attack surface
  - id: cis-kubernetes-1.5.1-1.4.1
    description: '[CIS Kubernetes] Ensure that the --profiling argument is set to false (Scheduler)'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") == "master"
    resourceType: kubernetes_master_node
    resources:
      - process:
          name: kube-scheduler
        condition: process.flag("--profiling") == "false"
    info:
      index:
        - 1. Control Plane Components
        - 1.4. Scheduler
      synopsis: Ensure that the --profiling argument is set to false (Scored)
      description: Disable profiling, if not needed.
      rationale: Profiling allows for the identification of specific performance bottlenecks. It generates a significant amount of program data that could potentially be exploited to uncover system and program details. If you are not experiencing any bottlenecks and do not need the profiler for troubleshooting purposes, it is recommended to turn it off to reduce the potential attack surface.
  - id: cis-kubernetes-1.5.1-1.4.2
    description: '[CIS Kubernetes] Ensure that the --bind-address argument is set to 127.0.0.1 (Scheduler)'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") == "master"
    resourceType: kubernetes_master_node
    resources:
      - process:
          name: kube-scheduler
        condition: process.flag("--bind-address") == "127.0.0.1"
    info:
      index:
        - 1. Control Plane Components
        - 1.4. Scheduler
      synopsis: Ensure that the --bind-address argument is set to 127.0.0.1 (Scored)
      description: Do not bind the scheduler service to non-loopback insecure addresses.
      rationale: The Scheduler API service which runs on port 10251/TCP by default is used for health and metrics information and is available without authentication or encryption. As such it should only be bound to a localhost interface, to minimize the cluster's attack surface
  - id: cis-kubernetes-1.5.1-2.1
    description: '[CIS Kubernetes] Ensure that the --cert-file and --key-file arguments are set as appropriate'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") == "etcd"
    resourceType: kubernetes_master_node
    resources:
      - process:
          name: etcd
        condition: process.flag("--cert-file") != "" && process.flag("--key-file") != ""
    info:
      index:
        - 2. etcd
      synopsis: Ensure that the --cert-file and --key-file arguments are set as appropriate (Scored)
      description: Configure TLS encryption for the etcd service.
      rationale: etcd is a highly-available key value store used by Kubernetes deployments for persistent storage of all of its REST API objects. These objects are sensitive in nature and should be encrypted in transit.
  - id: cis-kubernetes-1.5.1-2.2
    description: '[CIS Kubernetes] Ensure that the --client-cert-auth argument is set to true'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") == "etcd"
    resourceType: kubernetes_master_node
    resources:
      - process:
          name: etcd
        condition: process.flag("--client-cert-auth") == "true"
    info:
      index:
        - 2. etcd
      synopsis: Ensure that the --client-cert-auth argument is set to true (Scored)
      description: Enable client authentication on etcd service.
      rationale: etcd is a highly-available key value store used by Kubernetes deployments for persistent storage of all of its REST API objects. These objects are sensitive in nature and should not be available to unauthenticated clients. You should enable the client authentication via valid certificates to secure the access to the etcd service.
  - id: cis-kubernetes-1.5.1-2.3
    description: '[CIS Kubernetes] Ensure that the --auto-tls argument is not set to true'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") == "etcd"
    resourceType: kubernetes_master_node
    resources:
      - process:
          name: etcd
        condition: process.flag("--auto-tls") != "true"
    info:
      index:
        - 2. etcd
      synopsis: Ensure that the --auto-tls argument is not set to true (Scored)
      description: Do not use self-signed certificates for TLS.
      rationale: etcd is a highly-available key value store used by Kubernetes deployments for persistent storage of all of its REST API objects. These objects are sensitive in nature and should not be available to unauthenticated clients. You should enable the client authentication via valid certificates to secure the access to the etcd service.
  - id: cis-kubernetes-1.5.1-2.4
    description: '[CIS Kubernetes] Ensure that the --peer-cert-file and --peer-key-file arguments are set as appropriate'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") == "etcd"
    resourceType: kubernetes_master_node
    resources:
      - process:
          name: etcd
        condition: process.flag("--peer-cert-file") != "" && process.flag("--peer-key-file") != ""
    info:
      index:
        - 2. etcd
      synopsis: Ensure that the --peer-cert-file and --peer-key-file arguments are set as appropriate (Scored)
      description: etcd should be configured to make use of TLS encryption for peer connections.
      rationale: etcd is a highly-available key value store used by Kubernetes deployments for persistent storage of all of its REST API objects. These objects are sensitive in nature and should be encrypted in transit and also amongst peers in the etcd clusters.
  - id: cis-kubernetes-1.5.1-2.5
    description: '[CIS Kubernetes] Ensure that the --peer-client-cert-auth argument is set to true'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") == "etcd"
    resourceType: kubernetes_master_node
    resources:
      - process:
          name: etcd
        condition: process.flag("--peer-client-cert-auth") == "true"
    info:
      index:
        - 2. etcd
      synopsis: Ensure that the --peer-client-cert-auth argument is set to true (Scored)
      description: etcd should be configured for peer authentication.
      rationale: etcd is a highly-available key value store used by Kubernetes deployments for persistent storage of all of its REST API objects. These objects are sensitive in nature and should be accessible only by authenticated etcd peers in the etcd cluster.
  - id: cis-kubernetes-1.5.1-2.6
    description: '[CIS Kubernetes] Ensure that the --peer-auto-tls argument is not set to true'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") == "etcd"
    resourceType: kubernetes_master_node
    resources:
      - process:
          name: etcd
        condition: process.flag("--peer-auto-tls") != "true"
    info:
      index:
        - 2. etcd
      synopsis: Ensure that the --peer-auto-tls argument is not set to true (Scored)
      description: Do not use automatically generated self-signed certificates for TLS connections between peers.
      rationale: etcd is a highly-available key value store used by Kubernetes deployments for persistent storage of all of its REST API objects. These objects are sensitive in nature and should be accessible only by authenticated etcd peers in the etcd cluster. Hence, do not use self-signed certificates for authentication.
  - id: cis-kubernetes-1.5.1-3.2.1
    description: '[CIS Kubernetes] Ensure that a minimal audit policy is created'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") == "master"
    resourceType: kubernetes_master_node
    resources:
      - process:
          name: kube-apiserver
        condition: process.flag("--audit-policy-file") != ""
    info:
      index:
        - 3. Control Plane Configuration
        - 3.2. Logging
      synopsis: Ensure that a minimal audit policy is created (Scored)
      description: Kubernetes can audit the details of requests made to the API server. The --audit-policy-file flag must be set for this logging to be enabled.
      rationale: Logging is an important detective control for all systems, to detect potential unauthorised access.
  - id: cis-kubernetes-1.5.1-4.1.1
    description: '[CIS Kubernetes] Ensure that the kubelet service file permissions are set to 644 or more restrictive'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") not in ["master", "etcd"]
    resourceType: kubernetes_worker_node
    resources:
      - file:
          path: /usr/lib/systemd/system/kubelet.service
        condition: (file.permissions & 0644) == file.permissions
    info:
      index:
        - 4. Worker Nodes
        - 4.1. Worker Node Configuration Files
      synopsis: Ensure that the kubelet service file permissions are set to 644 or more restrictive (Scored)
      description: Ensure that the kubelet service file has permissions of 644 or more restrictive.
      rationale: The kubelet service file controls various parameters that set the behavior of the kubelet service in the worker node. You should restrict its file permissions to maintain the integrity of the file. The file should be writable by only the administrators on the system.
  - id: cis-kubernetes-1.5.1-4.1.2
    description: '[CIS Kubernetes] Ensure that the kubelet service file ownership is set to root:root'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") not in ["master", "etcd"]
    resourceType: kubernetes_worker_node
    resources:
      - file:
          path: /usr/lib/systemd/system/kubelet.service
        condition: file.user == "root" && file.group == "root"
    info:
      index:
        - 4. Worker Nodes
        - 4.1. Worker Node Configuration Files
      synopsis: Ensure that the kubelet service file ownership is set to root:root (Scored)
      description: Ensure that the kubelet service file ownership is set to root:root.
      rationale: The kubelet service file controls various parameters that set the behavior of the kubelet service in the worker node. You should set its file ownership to maintain the integrity of the file. The file should be owned by root:root.
  - id: cis-kubernetes-1.5.1-4.1.3
    description: '[CIS Kubernetes] Ensure that the proxy kubeconfig file permissions are set to 644 or more restrictive'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") not in ["master", "etcd"]
    resourceType: kubernetes_worker_node
    resources:
      - file:
          path: /var/lib/kube-proxy/kubeconfig
        condition: (file.permissions & 0644) == file.permissions
    info:
      index:
        - 4. Worker Nodes
        - 4.1. Worker Node Configuration Files
      synopsis: Ensure that the proxy kubeconfig file permissions are set to 644 or more restrictive (Scored)
      description: If kube-proxy is running, and if it is using a file-based kubeconfig file, ensure that the proxy kubeconfig file has permissions of 644 or more restrictive.
      rationale: The kube-proxy kubeconfig file controls various parameters of the kube-proxy service in the worker node. You should restrict its file permissions to maintain the integrity of the file. The file should be writable by only the administrators on the system. It is possible to run kube-proxy with the kubeconfig parameters configured as a Kubernetes ConfigMap instead of a file. In this case, there is no proxy kubeconfig file.
  - id: cis-kubernetes-1.5.1-4.1.4
    description: '[CIS Kubernetes] Ensure that the proxy kubeconfig file ownership is set to root:root'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") not in ["master", "etcd"]
    resourceType: kubernetes_worker_node
    resources:
      - file:
          path: /var/lib/kube-proxy/kubeconfig
        condition: file.user == "root" && file.group == "root"
    info:
      index:
        - 4. Worker Nodes
        - 4.1. Worker Node Configuration Files
      synopsis: Ensure that the proxy kubeconfig file ownership is set to root:root (Scored)
      description: If kube-proxy is running, ensure that the file ownership of its kubeconfig file is set to root:root.
      rationale: The kubeconfig file for kube-proxy controls various parameters for the kube-proxy service in the worker node. You should set its file ownership to maintain the integrity of the file. The file should be owned by root:root.
  - id: cis-kubernetes-1.5.1-4.1.5
    description: '[CIS Kubernetes] Ensure that the kubelet.conf file permissions are set to 644 or more restrictive'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") not in ["master", "etcd"]
    resourceType: kubernetes_worker_node
    resources:
      - file:
          path: /etc/kubernetes/kubelet.conf
        condition: (file.permissions & 0644) == file.permissions
    info:
      index:
        - 4. Worker Nodes
        - 4.1. Worker Node Configuration Files
      synopsis: Ensure that the kubelet.conf file permissions are set to 644 or more restrictive (Scored)
      description: Ensure that the kubelet.conf file has permissions of 644 or more restrictive.
      rationale: The kubelet.conf file is the kubeconfig file for the node, and controls various parameters that set the behavior and identity of the worker node. You should restrict its file permissions to maintain the integrity of the file. The file should be writable by only the administrators on the system.
  - id: cis-kubernetes-1.5.1-4.1.6
    description: '[CIS Kubernetes] Ensure that the kubelet.conf file ownership is set to root:root'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") not in ["master", "etcd"]
    resourceType: kubernetes_worker_node
    resources:
      - file:
          path: /etc/kubernetes/kubelet.conf
        condition: file.user == "root" && file.group == "root"
    info:
      index:
        - 4. Worker Nodes
        - 4.1. Worker Node Configuration Files
      synopsis: Ensure that the kubelet.conf file ownership is set to root:root (Scored)
      description: Ensure that the kubelet.conf file ownership is set to root:root.
      rationale: The kubelet.conf file is the kubeconfig file for the node, and controls various parameters that set the behavior and identity of the worker node. You should set its file ownership to maintain the integrity of the file. The file should be owned by root:root.
  - id: cis-kubernetes-1.5.1-4.1.7
    description: '[CIS Kubernetes] Ensure that the certificate authorities file permissions are set to 644 or more restrictive'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") not in ["master", "etcd"]
    resourceType: kubernetes_worker_node
    resources:
      - file:
          path: process.flag("kubelet", "--client-ca-file")
        condition: (file.permissions & 0644) == file.permissions
    info:
      index:
        - 4. Worker Nodes
        - 4.1. Worker Node Configuration Files
      synopsis: Ensure that the certificate authorities file permissions are set to 644 or more restrictive (Scored)
      description: Ensure that the certificate authorities file has permissions of 644 or more restrictive.
      rationale: The certificate authorities file controls the authorities used to validate API requests. You should restrict its file permissions to maintain the integrity of the file. The file should be writable by only the administrators on the system.
  - id: cis-kubernetes-1.5.1-4.1.8
    description: '[CIS Kubernetes] Ensure that the client certificate authorities file ownership is set to root:root'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") not in ["master", "etcd"]
    resourceType: kubernetes_worker_node
    resources:
      - file:
          path: process.flag("kubelet", "--client-ca-file")
        condition: file.user == "root" && file.group == "root"
    info:
      index:
        - 4. Worker Nodes
        - 4.1. Worker Node Configuration Files
      synopsis: Ensure that the client certificate authorities file ownership is set to root:root (Scored)
      description: Ensure that the certificate authorities file ownership is set to root:root.
      rationale: The certificate authorities file controls the authorities used to validate API requests. You should set its file ownership to maintain the integrity of the file. The file should be owned by root:root.
  - id: cis-kubernetes-1.5.1-4.1.9
    description: '[CIS Kubernetes] Ensure that the kubelet configuration file has permissions set to 644 or more restrictive'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") not in ["master", "etcd"]
    resourceType: kubernetes_worker_node
    resources:
      - file:
          path: process.flag("kubelet", "--config")
        condition: (file.permissions & 0644) == file.permissions
    info:
      index:
        - 4. Worker Nodes
        - 4.1. Worker Node Configuration Files
      synopsis: Ensure that the kubelet configuration file has permissions set to 644 or more restrictive (Scored)
      description: Ensure that if the kubelet refers to a configuration file with the --config argument, that file has permissions of 644 or more restrictive.
      rationale: The kubelet reads various parameters, including security settings, from a config file specified by the --config argument. If this file is specified you should restrict its file permissions to maintain the integrity of the file. The file should be writable by only the administrators on the system.
  - id: cis-kubernetes-1.5.1-4.1.10
    description: '[CIS Kubernetes] Ensure that the kubelet configuration file ownership is set to root:root'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") not in ["master", "etcd"]
    resourceType: kubernetes_worker_node
    resources:
      - file:
          path: process.flag("kubelet", "--config")
        condition: file.user == "root" && file.group == "root"
    info:
      index:
        - 4. Worker Nodes
        - 4.1. Worker Node Configuration Files
      synopsis: Ensure that the kubelet configuration file ownership is set to root:root (Scored)
      description: Ensure that if the kubelet refers to a configuration file with the --config argument, that file is owned by root:root.
      rationale: The kubelet reads various parameters, including security settings, from a config file specified by the --config argument. If this file is specified you should restrict its file permissions to maintain the integrity of the file. The file should be owned by root:root.
  - id: cis-kubernetes-1.5.1-4.2.1
    description: '[CIS Kubernetes] Ensure that the anonymous-auth argument is set to false'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") not in ["master", "etcd"]
    resourceType: kubernetes_worker_node
    resources:
      - process:
          name: kubelet
        condition: process.flag("--anonymous-auth") == "false"
    info:
      index:
        - 4. Worker Nodes
        - 4.2. Kubelet
      synopsis: Ensure that the anonymous-auth argument is set to false (Scored)
      description: Disable anonymous requests to the Kubelet server.
      rationale: When enabled, requests that are not rejected by other configured authentication methods are treated as anonymous requests. These requests are then served by the Kubelet server. You should rely on authentication to authorize access and disallow anonymous requests.
  - id: cis-kubernetes-1.5.1-4.2.2
    description: '[CIS Kubernetes] Ensure that the --authorization-mode argument is not set to AlwaysAllow (Kubelet)'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") not in ["master", "etcd"]
    resourceType: kubernetes_worker_node
    resources:
      - process:
          name: kubelet
        condition: process.flag("--authorization-mode") !~ "AlwaysAllow"
    info:
      index:
        - 4. Worker Nodes
        - 4.2. Kubelet
      synopsis: Ensure that the --authorization-mode argument is not set to AlwaysAllow (Scored)
      description: Do not allow all requests. Enable explicit authorization.
      rationale: Kubelets, by default, allow all authenticated requests (even anonymous ones) without needing explicit authorization checks from the apiserver. You should restrict this behavior and only allow explicitly authorized requests.
  - id: cis-kubernetes-1.5.1-4.2.3
    description: '[CIS Kubernetes] Ensure that the --client-ca-file argument is set as appropriate (Kubelet)'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") not in ["master", "etcd"]
    resourceType: kubernetes_worker_node
    resources:
      - process:
          name: kubelet
        condition: process.flag("--client-ca-file") != ""
    info:
      index:
        - 4. Worker Nodes
        - 4.2. Kubelet
      synopsis: Ensure that the --client-ca-file argument is set as appropriate (Scored)
      description: Enable Kubelet authentication using certificates.
      rationale: The connections from the apiserver to the kubelet are used for fetching logs for pods, attaching (through kubectl) to running pods, and using the kubelets port-forwarding functionality. These connections terminate at the kubelets HTTPS endpoint. By default, the apiserver does not verify the kubelets serving certificate, which makes the connection subject to man-in-the-middle attacks, and unsafe to run over untrusted and/or public networks. Enabling Kubelet certificate authentication ensures that the apiserver could authenticate the Kubelet before submitting any requests.
  - id: cis-kubernetes-1.5.1-4.2.4
    description: '[CIS Kubernetes] Ensure that the --read-only-port argument is set to 0'
    scope:
      - kubernetesNode
    resourceType: kubernetes_worker_node
    resources:
      - process:
          name: kubelet
        condition: 'process.flag("--read-only-port") == "0"'
        fallback:
          condition: 'process.hasFlag("--config") && !process.hasFlag("--read-only-port")'
          resource:
            file:
              path: process.flag("kubelet", "--config")
            condition: file.yaml(".readOnlyPort") == "0"
    info:
      index:
        - 4. Worker Nodes
        - 4.2. Kubelet
      synopsis: Ensure that the --read-only-port argument is set to 0 (Scored)
      description: Disable the read-only port.
      rationale: The Kubelet process provides a read-only API in addition to the main Kubelet API. Unauthenticated access is provided to this read-only API which could possibly retrieve potentially sensitive information about the cluster.
  - id: cis-kubernetes-1.5.1-4.2.5
    description: '[CIS Kubernetes] Ensure that the --streaming-connection-idle-timeout argument is not set to 0'
    scope:
      - kubernetesNode
    resourceType: kubernetes_worker_node
    resources:
      - process:
          name: kubelet
        condition: process.flag("--streaming-connection-idle-timeout") != "0"
        fallback:
          condition: 'process.hasFlag("--config") && !process.hasFlag("--streaming-connection-idle-timeout")'
          resource:
            file:
              path: process.flag("kubelet", "--config")
            condition: 'file.yaml(".streamingConnectionIdleTimeout") !~ "0+[[:lower:]]?"'
    info:
      index:
        - 4. Worker Nodes
        - 4.2. Kubelet
      synopsis: Ensure that the --streaming-connection-idle-timeout argument is not set to 0 (Scored)
      description: Do not disable timeouts on streaming connections.
      rationale: 'Setting idle timeouts ensures that you are protected against Denial-of-Service attacks, inactive connections and running out of ephemeral ports. Note: By default, --streaming-connection-idle-timeout is set to 4 hours which might be too high for your environment. Setting this as appropriate would additionally ensure that such streaming connections are timed out after serving legitimate use cases.'
  - id: cis-kubernetes-1.5.1-4.2.6
    description: '[CIS Kubernetes] Ensure that the --protect-kernel-defaults argument is set to true'
    scope:
      - kubernetesNode
    resourceType: kubernetes_worker_node
    resources:
      - process:
          name: kubelet
        condition: process.flag("--protect-kernel-defaults") == "true"
        fallback:
          condition: 'process.hasFlag("--config") && !process.hasFlag("--protect-kernel-defaults")'
          resource:
            file:
              path: process.flag("kubelet", "--config")
            condition: 'file.yaml(".protectKernelDefaults") == "true"'
    info:
      index:
        - 4. Worker Nodes
        - 4.2. Kubelet
      synopsis: Ensure that the --protect-kernel-defaults argument is set to true (Scored)
      description: Protect tuned kernel parameters from overriding kubelet default kernel parameter values.
      rationale: Kernel parameters are usually tuned and hardened by the system administrators before putting the systems into production. These parameters protect the kernel and the system. Your kubelet kernel defaults that rely on such parameters should be appropriately set to match the desired secured system state. Ignoring this could potentially lead to running pods with undesired kernel behavior.
  - id: cis-kubernetes-1.5.1-4.2.7
    description: '[CIS Kubernetes] Ensure that the --make-iptables-util-chains argument is set to true'
    scope:
      - kubernetesNode
    resourceType: kubernetes_worker_node
    resources:
      - process:
          name: kubelet
        condition: '!process.hasFlag("--make-iptables-util-chains") || process.flag("--make-iptables-util-chains") == "true"'
        fallback:
          condition: 'process.hasFlag("--config") && !process.hasFlag("--make-iptables-util-chains")'
          resource:
            file:
              path: process.flag("kubelet", "--config")
            condition: 'file.yaml(".makeIPTablesUtilChains") != "false"'
    info:
      index:
        - 4. Worker Nodes
        - 4.2. Kubelet
      synopsis: Ensure that the --make-iptables-util-chains argument is set to true (Scored)
      description: Allow Kubelet to manage iptables.
      rationale: Kubelets can automatically manage the required changes to iptables based on how you choose your networking options for the pods. It is recommended to let kubelets manage the changes to iptables. This ensures that the iptables configuration remains in sync with pods networking configuration. Manually configuring iptables with dynamic pod network configuration changes might hamper the communication between pods/containers and to the outside world. You might have iptables rules too restrictive or too open.
  - id: cis-kubernetes-1.5.1-4.2.10
    description: '[CIS Kubernetes] Ensure that the --tls-cert-file and --tls-private-key-file arguments are set as appropriate (Kubelet)'
    scope:
      - kubernetesNode
    resourceType: kubernetes_worker_node
    resources:
      - process:
          name: kubelet
        condition: process.flag("--tls-cert-file") != "" && process.flag("--tls-private-key-file") != ""
        fallback:
          condition: 'process.hasFlag("--config") && !process.hasFlag("--tls-cert-file") && !process.hasFlag("--tls-private-key-file")'
          resource:
            file:
              path: process.flag("kubelet", "--config")
            condition: '(file.yaml(".tlsCertFile") != "" && file.yaml(".tlsPrivateKeyFile") != "") || (process.flag("--feature-gates") =~ "RotateKubeletServerCertificate=true" && file.yaml(".serverTLSBootstrap") != "")'
    info:
      index:
        - 4. Worker Nodes
        - 4.2. Kubelet
      synopsis: Ensure that the --tls-cert-file and --tls-private-key-file arguments are set as appropriate (Scored)
      description: Setup TLS connection on the Kubelets.
      rationale: Kubelet communication contains sensitive parameters that should remain encrypted in transit. Configure the Kubelets to serve only HTTPS traffic.
  - id: cis-kubernetes-1.5.1-4.2.11
    description: '[CIS Kubernetes] Ensure that the --rotate-certificates argument is not set to false'
    scope:
      - kubernetesNode
    resourceType: kubernetes_worker_node
    resources:
      - process:
          name: kubelet
        condition: 'process.flag("--rotate-certificates") != "false"'
        fallback:
          condition: 'process.hasFlag("--config") && !process.hasFlag("--rotate-certificates")'
          resource:
            file:
              path: process.flag("kubelet", "--config")
            condition: 'file.yaml(".rotateCertificates") != "false"'
    info:
      index:
        - 4. Worker Nodes
        - 4.2. Kubelet
      synopsis: Ensure that the --rotate-certificates argument is not set to false (Scored)
      description: Enable kubelet client certificate rotation.
      rationale: 'The --rotate-certificates setting causes the kubelet to rotate its client certificates by creating new CSRs as its existing credentials expire. This automated periodic rotation ensures that the there is no downtime due to expired certificates and thus addressing availability in the CIA security triad. Note: This recommendation only applies if you let kubelets get their certificates from the API server. In case your kubelet certificates come from an outside authority/tool (e.g. Vault) then you need to take care of rotation yourself. Note: This feature also require the RotateKubeletClientCertificate feature gate to be enabled (which is the default since Kubernetes v1.7)'
  - id: cis-kubernetes-1.5.1-4.2.12
    description: '[CIS Kubernetes] Ensure that the RotateKubeletServerCertificate argument is set to true (Kubelet)'
    scope:
      - kubernetesNode
    hostSelector: node.label("kubernetes.io/role") not in ["master", "etcd"]
    resourceType: kubernetes_worker_node
    resources:
      - process:
          name: kubelet
        condition: process.flag("--feature-gates") =~ "RotateKubeletServerCertificate=true"
    info:
      index:
        - 4. Worker Nodes
        - 4.2. Kubelet
      synopsis: Ensure that the RotateKubeletServerCertificate argument is set to true (Scored)
      description: Enable kubelet server certificate rotation.
      rationale: 'RotateKubeletServerCertificate causes the kubelet to both request a serving certificate after bootstrapping its client credentials and rotate the certificate as its existing credentials expire. This automated periodic rotation ensures that the there are no downtimes due to expired certificates and thus addressing availability in the CIA security triad. Note: This recommendation only applies if you let kubelets get their certificates from the API server. In case your kubelet certificates come from an outside authority/tool (e.g. Vault) then you need to take care of rotation yourself.'
  - id: cis-kubernetes-1.5.1-5.1.5
    description: '[CIS Kubernetes] Ensure that default service accounts are not actively used'
    scope:
      - kubernetesCluster
    resourceType: kubernetes_cluster
    resources:
      - custom:
          name: kubernetesDefaultServiceAccounts
        condition: _
    info:
      index:
        - 5. Policies
        - 5.1. RBAC and Service Accounts
      synopsis: Ensure that default service accounts are not actively used. (Scored)
      description: The default service account should not be used to ensure that rights granted to applications can be more easily audited and reviewed.
      rationale: Kubernetes provides a default service account which is used by cluster workloads where no specific service account is assigned to the pod. Where access to the Kubernetes API from a pod is required, a specific service account should be created for that pod, and rights granted to that service account. The default service account should be configured such that it does not provide a service account token and does not have any explicit rights assignments.
  - id: cis-kubernetes-1.5.1-5.2.2
    description: '[CIS Kubernetes] Minimize the admission of containers wishing to share the host process ID namespace'
    scope:
      - kubernetesCluster
    resources:
      - kubeApiserver:
          kind: podsecuritypolicies
          version: v1beta1
          group: policy
          apiRequest:
            verb: list
        condition: count(kube.resource.jq(".spec.hostPID") != "true") > 0
    info:
      index:
        - 5. Policies
        - 5.2. Pod Security Policies
      synopsis: Minimize the admission of containers wishing to share the host process ID namespace (Scored)
      description: Do not generally permit containers to be run with the hostPID flag set to true.
      rationale: A container running in the host's PID namespace can inspect processes running outside the container. If the container also has access to ptrace capabilities this can be used to escalate privileges outside of the container. There should be at least one PodSecurityPolicy (PSP) defined which does not permit containers to share the host PID namespace. If you need to run containers which require hostPID, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.
  - id: cis-kubernetes-1.5.1-5.2.3
    description: '[CIS Kubernetes] Minimize the admission of containers wishing to share the host IPC namespace'
    scope:
      - kubernetesCluster
    resourceType: kubernetes_cluster
    resources:
      - kubeApiserver:
          kind: podsecuritypolicies
          version: v1beta1
          group: policy
          apiRequest:
            verb: list
        condition: count(kube.resource.jq(".spec.hostIPC") != "true") > 0
    info:
      index:
        - 5. Policies
        - 5.2. Pod Security Policies
      synopsis: Minimize the admission of containers wishing to share the host IPC namespace (Scored)
      description: Do not generally permit containers to be run with the hostIPC flag set to true.
      rationale: A container running in the host's IPC namespace can use IPC to interact with processes outside the container. There should be at least one PodSecurityPolicy (PSP) defined which does not permit containers to share the host IPC namespace. If you have a requirement to containers which require hostIPC, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.
  - id: cis-kubernetes-1.5.1-5.2.4
    description: '[CIS Kubernetes] Minimize the admission of containers wishing to share the host network namespace'
    scope:
      - kubernetesCluster
    resourceType: kubernetes_cluster
    resources:
      - kubeApiserver:
          kind: podsecuritypolicies
          version: v1beta1
          group: policy
          apiRequest:
            verb: list
        condition: count(kube.resource.jq(".spec.hostNetwork") != "true") > 0
    info:
      index:
        - 5. Policies
        - 5.2. Pod Security Policies
      synopsis: Minimize the admission of containers wishing to share the host network namespace (Scored)
      description: Do not generally permit containers to be run with the hostNetwork flag set to true.
      rationale: A container running in the host's network namespace could access the local loopback device, and could access network traffic to and from other pods. There should be at least one PodSecurityPolicy (PSP) defined which does not permit containers to share the host network namespace. If you have need to run containers which require hostNetwork, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.
  - id: cis-kubernetes-1.5.1-5.2.5
    description: '[CIS Kubernetes] Minimize the admission of containers with allowPrivilegeEscalation'
    scope:
      - kubernetesCluster
    resourceType: kubernetes_cluster
    resources:
      - kubeApiserver:
          kind: podsecuritypolicies
          version: v1beta1
          group: policy
          apiRequest:
            verb: list
        condition: count(kube.resource.jq(".spec.allowPrivilegeEscalation") != "true") > 0
    info:
      index:
        - 5. Policies
        - 5.2. Pod Security Policies
      synopsis: Minimize the admission of containers with allowPrivilegeEscalation (Scored)
      description: Do not generally permit containers to be run with the allowPrivilegeEscalation flag set to true.
      rationale: A container running with the allowPrivilegeEscalation flag set to true may have processes that can gain more privileges than their parent. There should be at least one PodSecurityPolicy (PSP) defined which does not permit containers to allow privilege escalation. The option exists (and is defaulted to true) to permit setuid binaries to run. If you have need to run containers which use setuid binaries or require privilege escalation, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.
  - id: cis-kubernetes-1.5.1-5.3.2
    description: '[CIS Kubernetes] Ensure that all Namespaces have Network Policies defined'
    scope:
      - kubernetesCluster
    resourceType: kubernetes_cluster
    resources:
      - custom:
          name: kubernetesNetworkPolicies
        condition: _
    info:
      index:
        - 5. Policies
        - 5.3. Network Policies and CNI
      synopsis: Ensure that all Namespaces have Network Policies defined (Scored)
      description: Use network policies to isolate traffic in your cluster network.
      rationale: Running different applications on the same Kubernetes cluster creates a risk of one compromised application attacking a neighboring application. Network segmentation is important to ensure that containers can communicate only with those they are supposed to. A network policy is a specification of how selections of pods are allowed to communicate with each other and other network endpoints. Network Policies are namespace scoped. When a network policy is introduced to a given namespace, all traffic not allowed by the policy is denied. However, if there are no network policies in a namespace all traffic will be allowed into and out of the pods in that namespace.
  - id: cis-kubernetes-1.5.1-5.7.4
    description: '[CIS Kubernetes] The default namespace should not be used'
    scope:
      - kubernetesCluster
    resourceType: kubernetes_cluster
    resources:
      - kubeApiserver:
          kind: pods
          version: v1
          namespace: default
          apiRequest:
            verb: list
        condition: count(_) == 0
      - kubeApiserver:
          kind: services
          version: v1
          namespace: default
          fieldSelector: metadata.name!=kubernetes,metadata.name!=openshift
          apiRequest:
            verb: list
        condition: count(_) == 0
    info:
      index:
        - 5. Policies
        - 5.7. General Policies
      synopsis: The default namespace should not be used (Scored)
      description: Kubernetes provides a default namespace, where objects are placed if no namespace is specified for them. Placing objects in this namespace makes application of RBAC and other controls more difficult.
      rationale: Resources in a Kubernetes cluster should be segregated by namespace, to allow for security controls to be applied at that level and to make it easier to manage resources.
